# Blog Project - Cursor Rules

## 프로젝트 개요
- **프로젝트**: 개인 블로그 웹사이트
- **스택**: Next.js 14 (App Router), TypeScript, Tailwind CSS, SST, React Markdown
- **배포**: AWS (SST 사용)

## 코딩 스타일 & 규칙

### TypeScript
- 모든 파일에 엄격한 타입 정의 사용
- `any` 타입 사용 금지, 대신 구체적인 타입 정의
- interface 우선 사용, type은 유니온/교차 타입에만 사용
- 옵셔널 체이닝과 nullish coalescing 적극 활용

### React & Next.js
- 함수형 컴포넌트와 React Hooks 사용
- App Router 구조 준수 (/app 디렉토리)
- Server Components 우선 사용, 필요시에만 Client Components
- 컴포넌트는 _components 디렉토리에 카테고리별로 정리
- 파일명은 PascalCase (컴포넌트), camelCase (유틸리티)

### 파일 구조
```
app/
├── (route)/           # 라우트 그룹
├── _components/       # 재사용 가능한 컴포넌트
├── _lib/             # 라이브러리 및 API 클라이언트
├── _utils/           # 유틸리티 함수
├── _styles/          # 스타일 파일
└── _assets/          # 정적 자산
```

### 스타일링 (Tailwind CSS)
- Tailwind CSS 클래스 우선 사용
- 복잡한 스타일은 CSS Module이나 styled-components 대신 Tailwind 조합
- 반응형 디자인 필수 (mobile-first)
- 다크모드 지원 고려

### 성능 최적화
- 이미지는 Next.js Image 컴포넌트 사용
- 동적 임포트로 코드 스플리팅
- 메타데이터 최적화 (SEO)
- Web Vitals 고려한 개발

### 상태 관리
- 로컬 상태는 useState/useReducer
- 서버 상태는 React Query 또는 SWR 고려
- 전역 상태는 최소화, 필요시 Context API

### 에러 처리
- Error Boundary 구현
- 적절한 에러 메시지와 폴백 UI
- try-catch 블록으로 예외 처리

### API & 데이터
- 마크다운 파일 기반 블로그 포스트
- gray-matter로 frontmatter 파싱
- react-markdown으로 렌더링
- GitHub API 활용한 동적 콘텐츠

### 코드 품질
- ESLint 규칙 준수
- 컴포넌트 분리 원칙 (단일 책임)
- 커스텀 훅으로 로직 재사용
- 의미있는 변수명과 함수명 사용

### 접근성 (a11y)
- 시맨틱 HTML 태그 사용
- ARIA 속성 적절히 활용
- 키보드 네비게이션 지원
- 색상 대비 고려

### 배포 & 환경
- SST를 통한 AWS 배포
- 환경별 설정 분리 (dev/production)
- 환경변수 활용

### 주석 & 문서화
- 복잡한 로직에는 주석 추가
- JSDoc으로 함수 문서화
- README 업데이트 유지

### Git & 협업
- 의미있는 커밋 메시지
- 기능별 브랜치 생성
- PR 전 self-review

## 금지사항
- console.log는 개발 중에만, 프로덕션 코드에서 제거
- 하드코딩된 값 사용 금지, 상수화 필수
- 인라인 스타일 사용 금지
- 중복 코드 최소화
- 사용하지 않는 import 제거

## 추천 라이브러리
- UI: Headless UI, Radix UI
- 애니메이션: Framer Motion (이미 포함)
- 아이콘: Lucide React, Heroicons
- 유틸리티: clsx, date-fns

이 규칙들을 따라 일관성 있고 고품질의 블로그 웹사이트를 개발하세요. 